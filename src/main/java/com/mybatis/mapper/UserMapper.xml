<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
1.命名空间配置全局唯一包名+文件名
2.配置Mapped Statement
3. statement 配置
id 值声明statement 编号同一命名空间(同一文件)下不可重复
parameterType 输入参数即占位符的数据类型类型可以是基本数据类型,字符
串,java bean ,map,list 等
resultType 输出结果类型可以是基本数据类型,字符串,java bean,map 等
statement 描述即待执行的sql
#{id} 占位符变量名为id/value 均可${value} 变量名必须为value 字符
串拼接形式无法避免sql 注入
-->
<mapper namespace="com.mybatis.mapper.UserMapper">
    <resultMap id="userMap" type="user">
        <id column="id" property="id"></id>
        <result column="user_name" property="userName"></result>
        <result column="user_pwd" property="userPwd"></result>
        <result column="real_name" property="realName"></result>
        <result column="card_id" property="cardId"></result>
        <result column="nation" property="nation"></result>
    </resultMap>

    <select id="queryUserById" parameterType="int"
            resultType="user">
          select id,user_name as userName,user_pwd as userPwd from user where id=#{id}
    </select>

    <!--根据用户名查询用户信息-->
    <select id="queryUserByName" parameterType="string" resultMap="userMap">
        select * from user where 1=1
        <if test="@Ognl@isNotEmpty(userName)">
            and user_name like concat('%',#{userName},'%')
        </if>
    </select>

    <!--根据国家检索用户信息-->
    <select id="queryUserByNation" parameterType="string" resultMap="userMap">
        select id,
        <choose>
            <when test="@Ognl@isNotEmpty(nation)">
                user_name
            </when>
            <otherwise>
                real_name
            </otherwise>
        </choose>
        from user where nation like concat('%',#{nation},'%')
    </select>

    <!--通过用户名和国家查询个人信息-->
    <!--利用 where标签自动去掉 where-->
    <select id="queryUserByNameAndNation" parameterType="user" resultMap="userMap">
        select * from user
        <where>
            <if test="@Ognl@isNotEmpty(userName)">
                user_name like concat('%',#{userName},'%')
            </if>
            <if test="@Ognl@isNotEmpty(nation)">
                nation like concat('%',#{nation},'%')
            </if>
        </where>
    </select>

    <!--通过用户名和国家查询个人信息-->
    <!--利用 trim按需要自动去掉slq中的语句-->
    <select id="queryUserByNameAndNation2" parameterType="user" resultMap="userMap">
        select * from user
        <trim prefix="where" prefixOverrides="and|or">
            <if test="@Ognl@isNotEmpty(userName)">
                user_name like concat('%',#{userName},'%')
            </if>
            <if test="@Ognl@isNotEmpty(nation)">
                nation like concat('%',#{nation},'%')
            </if>
        </trim>
    </select>

    <!--添加不返回id-->
    <insert id="addUser" parameterType="user">
INSERT INTO user (user_name, user_pwd, real_name, nation, card_id)
VALUES ( #{userName}, #{userPwd}, #{realName}, #{nation}, #{cardId});
    </insert>

    <!--添加返回id-->
    <insert id="addUserHasKey" parameterType="user">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            select LAST_INSERT_ID() as id
        </selectKey>
        INSERT INTO user (user_name, user_pwd, real_name, nation, card_id)
        VALUES ( #{userName}, #{userPwd}, #{realName}, #{nation}, #{cardId});
    </insert>

    <!--添加返回id(通用版)-->
    <insert id="addUserHasKeyGeneral" parameterType="user" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (user_name, user_pwd, real_name, nation, card_id)
        VALUES ( #{userName}, #{userPwd}, #{realName}, #{nation}, #{cardId});
    </insert>

    <!--批量添加用户-->
    <insert id="addUserBatch" parameterType="list">
        INSERT INTO user (user_name, user_pwd, real_name, nation, card_id)
        VALUES
        <foreach collection="list" item="item" separator=",">
            ( #{item.userName}, #{item.userPwd}, #{item.realName}, #{item.nation}, #{item.cardId})
        </foreach>
    </insert>

    <!--更新用户信息-->
    <update id="updateUser" parameterType="user">
      UPDATE user SET
      user_name = #{userName}, user_pwd = #{userPwd}, real_name = #{realName}
       WHERE id = #{id}
    </update>

    <!--批量更新用户数据-->
    <update id="updateUserBatch">
        UPDATE user SET user_pwd = '123456'
        WHERE
        id in (
        <foreach collection="array" item="item" separator=",">
            #{item}
        </foreach>
        )
    </update>

    <!--删除-->
    <delete id="deleteUser" parameterType="int">
        delete from user where id=#{id}
    </delete>

    <!--批量删除-->
    <delete id="deleteUserBatch" parameterType="list">
        delete from user where id
        in (
        <foreach collection="list" item="item" separator=",">
            #{item}
        </foreach>
        )
    </delete>


    <!--映射关系问题-->
    <resultMap id="user_card_map" type="userCardDto">
        <!--<association property="user" javaType="user">-->
            <id column="id" property="id"></id>
            <result column="user_name" property="userName"></result>
            <result column="user_pwd" property="userPwd"></result>
            <result column="real_name" property="realName"></result>
            <result column="card_id" property="cardId"></result>
            <result column="nation" property="nation"></result>
       <!-- </association>-->
        <!--实现一对一-->
        <association property="card" javaType="card">
            <id column="cid" property="id"></id>
            <result column="card_num" property="cardNum"></result>
        </association>
    </resultMap>

    <select id="queryUserCardByIdUse" parameterType="int" resultMap="user_card_map">
        SELECT
            user.id,
            user.user_name,
            user.user_pwd,
            user.real_name,
            user.nation,
            user.card_id,
            card.id,
            card.card_num
        FROM
            user
        INNER JOIN card ON card.id = user.id
        where user.id = #{i}
    </select>

    <!--实现一对多-->
    <resultMap id="user_card_account_map" extends="user_card_map" type="userCardAccountDto">
        <collection property="accounts" ofType="account">
            <id column="aid" property="id"></id>
            <result column="aname" property="aname"></result>
            <result column="type" property="type"></result>
            <result column="money" property="money"></result>
            <result column="user_id" property="userId"></result>
            <result column="create_time" property="createTime"></result>
            <result column="update_time" property="updateTime"></result>
            <result column="remark" property="remark"></result>
        </collection>
    </resultMap>

    <select id="queryUserCardAccountByIdUses" parameterType="int" resultMap="user_card_account_map">
            SELECT
            u.id,
            u.user_name,
            u.user_pwd,
            u.real_name,
            u.nation,
            u.card_id,
            c.id AS cid,
            c.card_num,
            a.id as aid,
            a.aname,
            a.type,
            a.money,
            a.user_id,
            a.create_time,
            a.update_time,
            a.remark
            FROM
            `user` AS u
            LEFT JOIN card AS c ON c.id = u.card_id
            LEFT JOIN account AS a ON a.user_id = u.id
            WHERE
            u.id = #{id}

    </select>

</mapper>